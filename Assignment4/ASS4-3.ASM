STACK 	SEGMENT	PARA	STACK
		DW		100H DUP(?)
STACK	ENDS

DATA	SEGMENT	PARA
	LEN 	EQU	32
	LIST	DB	'ABOVE ZEBRA$'
	TEMP 	DB 	LEN DUP(?)
	NL 		DB 	13,10,'$'
	STR1	DB	LEN-1
			DB 	?
			DB 	LEN DUP(?) 	
DATA 	ENDS

CODE 	SEGMENT PARA
		ASSUME	CS:CODE,DS:DATA,SS:STACK
NEWLINE MACRO
		PUSH 	DX
		PUSH	AX
		MOV 	DX,OFFSET NL
		MOV 	AH,9
		INT 	21H
		POP 	AX
		POP 	DX		
		ENDM

OUTPUT 	MACRO 	MSG
		PUSH 	DX
		PUSH 	AX
		NEWLINE
		MOV 	DX,OFFSET MSG
		MOV 	AH,9
		INT 	21H
		POP 	AX
		POP 	DX
		ENDM

INPUT 	PROC
	INPUTSTR1:
		PUSH 	DX
		PUSH 	AX
		PUSH 	SI

		MOV 	DX,OFFSET STR1
		MOV 	AH,0AH
		INT 	21H
		MOV 	SI,OFFSET STR1+2
		MOV 	AL,STR1+1
		XOR 	AH,AH
		ADD 	SI,AX
		MOV 	BYTE PTR [SI],'$'

		POP 	SI
		POP 	AX
		POP 	DX
		RET
INPUT 	ENDP

COPY 	PROC
	STRCPY:
		LODSB
		CMP 	AL,20H
		JE 		COPYRET
		STOSB
		JMP 	STRCPY
	COPYRET:
		STOSB
		RET
COPY 	ENDP

INSERT 	PROC
	INSERT_STR1:
		MOV 	CL,STR1+1
		XOR 	CH,CH
	INSERT_LP:
		LODSB
		STOSB
		LOOP 	INSERT_LP
		MOV 	AL,20H
		STOSB
		RET
INSERT 	ENDP

COPY2 	PROC
	STRCPY2:
		LODSB
		CMP 	AL,'$'
		JE 		COPYRET2
		STOSB
		JMP 	STRCPY2
	COPYRET2:
		STOSB
		RET
COPY2 	ENDP

MAIN	PROC 	FAR
	MAINPROC:
		MOV 	AX,DATA
		MOV 	DS,AX
		MOV 	ES,AX
		OUTPUT 	LIST
		CALL 	INPUT
		MOV 	SI,OFFSET LIST
		MOV 	DI,OFFSET TEMP
		CALL 	COPY
		PUSH 	SI
		MOV 	SI,OFFSET STR1+2
		CALL 	INSERT
		POP 	SI
		CALL 	COPY2
		OUTPUT 	TEMP

	EXIT:	
		MOV 	AX,4C00H
		INT 	21H
MAIN 	ENDP

CODE 	ENDS
		END 	MAIN